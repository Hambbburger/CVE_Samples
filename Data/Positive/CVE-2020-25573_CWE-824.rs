fn into_iter(mut self) -> IntoIter<K, V> {
        let (head, tail) = if !self.head.is_null() {
            unsafe { ((*self.head).prev, (*self.head).next) }
        } else {
            (ptr::null_mut(), ptr::null_mut())
        };
        let len = self.len();
        if !self.head.is_null() {
            unsafe { drop_empty_node(self.head) }
        }
        self.clear_free_list();
        // drop the HashMap but not the LinkedHashMap
        self.map = unsafe { mem::uninitialized() };
        mem::forget(self);

        IntoIter {
            head: head,
            tail: tail,
            remaining: len,
            marker: marker::PhantomData,
        }
    }
