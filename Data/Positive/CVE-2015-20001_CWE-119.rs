fn sift_up(&mut self, start: usize, mut pos: usize) {
    
        unsafe {
            let new = replace(&mut self.data[pos], zeroed());
            

            while pos > start {
                let parent = (pos - 1) >> 1;

                if new <= self.data[parent] { break; }

                let x = replace(&mut self.data[parent], zeroed());
                ptr::write(&mut self.data[pos], x);
                pos = parent;
        
            }
            ptr::write(&mut self.data[pos], new);
        }
    }


fn sift_down_range(&mut self, mut pos: usize, end: usize) {
        unsafe {
            let start = pos;
            let new = replace(&mut self.data[pos], zeroed());

            let mut child = 2 * pos + 1;
            while child < end {
                let right = child + 1;
                if right < end && !(self.data[child] > self.data[right]) {
                    child = right;
                }
                let x = replace(&mut self.data[child], zeroed());
                ptr::write(&mut self.data[pos], x);
                pos = child;
                child = 2 * pos + 1;
               
            }

            ptr::write(&mut self.data[pos], new);
            self.sift_up(start, pos);
        }
    }
