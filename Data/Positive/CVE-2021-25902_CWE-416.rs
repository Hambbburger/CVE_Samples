fn map_array(mut values: [T; $size], mut f: F) -> Self {
                use std::{
                    mem::forget,
                    ptr::{read, write},
                };

                unsafe {
                    // All elements of `result` is written.
                    // Each element of `values` read once and then forgotten.
                    // Hence safe in case `f` never panics.
                    // TODO: Make it panic-safe.
                    let mut result: ::std::mem::MaybeUninit<[U; $size]> =
                        ::std::mem::MaybeUninit::zeroed();
                    for i in 0..$size {
                        write(
                            result.as_mut_ptr().cast::<U>().add(i),
                            f(read(&mut values[i])),
                        );
                    }
                    forget(values);
                    result.assume_init()
                }
            }
