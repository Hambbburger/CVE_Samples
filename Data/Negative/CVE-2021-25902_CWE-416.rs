fn map_array(values: [T; $size], mut f: F) -> Self {
                use std::{
                    mem::{ManuallyDrop, MaybeUninit},
                    ptr::{read, write},
                };

                // Use `ManuallyDrop<_>` to guard against panic safety issue.
                // Upon panic in `f`, `values` isn't dropped
                // and thus item copied by `read()` is dropped only once.
                let mut values = ManuallyDrop::new(values);
                unsafe {
                    let mut result: MaybeUninit<[U; $size]> = MaybeUninit::zeroed();
                    for i in 0..$size {
                        write(
                            result.as_mut_ptr().cast::<U>().add(i),
                            f(read(&mut values[i])),
                        );
                    }
                    result.assume_init()
                }
            }
